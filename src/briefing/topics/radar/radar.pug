-
	// The maximum distance that can be displayed
	const maxDistance = 12500;
	// The minimum distance that can be displayed
	const minDistance = 6000;
	// A constant shift for distance, to increase scale and avoid a lot of white space
	const shiftDistance = minDistance - 500;
	// The maximum duration that can be displayed
	const maxTime = 70;
	// The minimum duration that can be displayed
	const minTime = 10;
	// A constant shift for duration, to increase scale and avoid a lot of white space
	const shiftTime = 0; // Turned off
	// Distance at which a ship is considered to "almost" have a stealth radar capability
	// This is the distance at which it will generally be too late to turn away, even though the
	// ship was technically spotted beyond its radar range.
	// By default it is turned off, i.e. it will only distinguish between stealth radar capability 
	// yes or no.
	const STEALTH_RADAR_ALMOST = options?.almostThreshold || 0;

	function warningClass(ship, dist) {
		let concealment = 1000 * ship.concealment; // in meters
		dist = Number(dist);
		if (concealment < dist)
			return "stealthwarn-severe";
		else if (concealment < dist + STEALTH_RADAR_ALMOST)
			return "stealthwarn-moderate";
		else return "";
	}
	function teamClasses(ship) {
		let result = [];
		if (teams.allies.includes(ship.id))
			result.push('ally');
		if (teams.enemies.includes(ship.id))
			result.push('enemy');
		if (teams.player === ship.id)
			result.push('player');
		return result;
	}
	function length(range) {
		return (range - shiftDistance) * 100/(maxDistance - shiftDistance);
	}
	function angle(time) {
		return (time - shiftTime) / (maxTime - shiftTime) * 1/2 * Math.PI;
	}
	function polarToCartesian(angle, length) {
		return {
			x: Math.cos(angle) * length,
			y: -Math.sin(angle) * length
		}
	}
if ships.length > 0
	svg(version="1.1", xmlns="http://www.w3.org/2000/svg", viewbox="0 -100 100 105")
		linearGradient#radar-both(x1='0%' y1='100%' x2='0%' y2='0%')
			stop.ally(offset='16%')
			stop.enemy(offset='66%')

		g.grid
			each range in [6000, 8000, 10000, 12000]
				path(d=`M ${length(range)} 0 A ${length(range)} ${length(range)} 0 0 0 0 ${-length(range)}`)
			each time in [10, 20, 30, 40, 50, 70, 80, 90]
				line(x1=polarToCartesian(angle(time), length(minDistance)).x,
						y1=polarToCartesian(angle(time), length(minDistance)).y,
						x2=polarToCartesian(angle(time), length(maxDistance)).x,
						y2=polarToCartesian(angle(time), length(maxDistance)).y)

		g.axis.range
			line(x1=length(minDistance), y1=0, x2=100, y2=0)
			each range in [6000, 8000, 10000, 12000]
				line(x1=length(range) y1="-1" x2=length(range) y2="+1")
				text(x=length(range) y="2") #{range / 1000}km
		g.axis.time
			each time in [20, 40, 60]
				- 
					let start = polarToCartesian(angle(time), length(minDistance));
					let end = polarToCartesian(angle(time), length(maxDistance));
	
				line(x1=start.x, y1=start.y, x2=end.x, y2=end.y)
				text(x=end.x + 1, y=end.y) #{time}s
		
		each range in Object.keys(radars)
			- let n = Object.keys(radars[range]).length; // Number of different workTimes for this range
			each workTime, index in Object.keys(radars[range])
				- 
					// Offset arcs to the left and right of the actual value if there is more than one
					// workTime for the range.
					// I.e. if there are three different workTimes for a 10km radar,
					// the first one will be 1 width inward of 10km, the second right on, the third 1 width outward
					let radius = length(range) + index - (n-1)/2;
					let start = polarToCartesian(0, radius);
					let end = polarToCartesian(angle(workTime), radius);
					let maxEnd = polarToCartesian(angle(radars[range][workTime][0].maxTime), radius);
				g.radar(
					class=radars[range][workTime].flatMap(entry => teamClasses(entry.ship)), 
					onmouseenter='highlight(this)',
					onmouseleave='highlight(this)',
					data-for=radars[range][workTime].map(entry => entry.ship.name).join(' '))
					
					path.base(d=`M ${start.x} ${start.y} A ${radius} ${radius} 0 0 0 ${end.x} ${end.y}`)
					text(x=end.x + 0.25, y=end.y - 0.25) #{workTime}s
					path.max(d=`M ${end.x} ${end.y} A ${radius} ${radius} 0 0 0 ${maxEnd.x} ${maxEnd.y}`)
					text(x=maxEnd.x + 0.25, y=maxEnd.y - 0.25) #{Math.ceil(radars[range][workTime][0].maxTime)}s

	each range in Object.keys(radars)
		- const maxTime = Math.max(...Object.keys(radars[range]));
		div.label(style=`
				top: ${100 - 5 + polarToCartesian(angle(maxTime/2), length(range)).y}%; 
				left: ${polarToCartesian(angle(maxTime/2), length(range)).x}%;`)
			each workTime in Object.keys(radars[range])
				each ship in radars[range][workTime].map(entry => entry.ship)
					span.ship(
						class=teamClasses(ship), 
						class=warningClass(ship, range), 
						onmouseenter='highlight(this)',
						onmouseleave='highlight(this)',
						data-details=ship.name,
						data-for=ship.name)
						| #{ship.label}
					br
					aside.details(class=teamClasses(ship), data-details-for=ship.name)
						include details
	script
		include highlight.js

else
	.no-radars
		| There are no radar ships in this battle.

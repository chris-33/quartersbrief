mixin details(entry)
	.details-title #{entry.ship.label}

	.details-line
		span.caption Surface detectability:
		span.value 
			| #{entry.concealment.toFixed(2)}
			span.unit km

	.details-line
		span.caption Surface detectability (base):
		span.value
			| #{entry.baseConcealment.toFixed(2)}
			span.unit km

	.details-line
		span.caption Smoke firing penalty:
		span.value
			| #{entry.ship.get('hull.visibilityCoefGKInSmoke').toFixed(2)}
			span.unit km

	.details-line
		span.caption Air detectability:
		span.value
			| #{entry.ship.get('hull.visibilityFactorByPlane').toFixed(2)}
			span.unit km

//- A constant value that all ship concealments will be reduced by. This reduces bar length and exaggerates concealment differences.
- const reduction = 3;
//- The maximum concealment present. Used to scale bar lengths - this value will translate to 100%.
- const maxConcealment = Math.max(...entries.map(entry => entry.concealment))
div
	each entry in entries
		- const ship = entry.ship;
		.ship(data-details=ship.name,
			class = {
				"ally": teams.allies.includes(ship.id),
				"enemy": teams.enemies.includes(ship.id),
				"player": teams.player === ship.id
			})
			span.shipbar.label(style=`width: ${(entry.concealment - reduction) * 100/maxConcealment}%`)
				| #{ship.label}
			span.value(class={ "player": ship.id === teams.player }) #{entry.concealment.toFixed(2)}
			span.unit km
			aside.details(data-details-for=ship.name, class = {
				"ally": teams.allies.includes(ship.id),
				"enemy": teams.enemies.includes(ship.id),
				"player": teams.player === ship.id
			})
				+details(entry)
extends ../armortopic
include details

block content
	if ownship.he || ownship.sap
		- 
			function calculateBiggestBox(view) {
				return Object.values(armors)
					.map(armor => armor[view])
					.filter(armor => !(armor instanceof Error))
					.map(armor => boundingBox(armor))
					.reduce((prev, curr) => ({
						left: Math.min(prev.left, curr.left),
						top: Math.min(prev.top, curr.top),
						width: Math.max(prev.width, curr.width),
						height: Math.max(prev.height, curr.height)
					}));		
			}
			const biggestbox = {
				side: calculateBiggestBox('side'),
				top: calculateBiggestBox('top')
			};

			function classifier(ship) {				
				return function(piece, id) {
					const thickness = ship.get(`hull.armor.${id}`);
					return {
						he: thickness <= ownship.he,
						ifhe: thickness <= ownship.ifhe,
						sap: thickness <= ownship.sap
					};
				}
			}

		div.ships
			each ship in ships
				.ship(class=ship.class.toLowerCase(), data-details=ship.name)
					
					.label #{ship.label}

					each view in [ 'side', 'top' ]
						.armor(class=view)
							- const armor = armors[ship.name][view];
							if armor instanceof Error
								div.error This armor view could not be created
							else
								+armorview(armor, {
									boundingBox: { ...biggestbox[view], left: boundingBox(armor).left },
									classifier: classifier(ship)
								})

					+details(ship, armors[ship.name])

		div.ownguns
			| Your main artillery penetrates 
			if ownship.he 
				span #{ownship.he}
					span.unit mm
				|  of armor
				if ownship.sap
					|  with HE
				if ownship.ifhe
					|  (#{ownship.ifhe} 
					span.unit mm
					|  with IFHE)
			if ownship.sap
				if ownship.he
					| , 
				| #{ownship.sap}
				span.unit mm
				| with SAP

	else
		.message You do not have HE or SAP shells.

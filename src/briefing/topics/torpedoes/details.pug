- 
	const buildNames = {
		1: [ '' ],
		2: [ 'Stock', 'Top' ],
		3: [ 'Stock', 'Middle', 'Top' ],
		4: [ 'Stock', 'Lower middle', 'Upper middle', 'Top' ],
	}

	function compare(a,b) {
		if (a == null || b == null) 
			return '';
		switch(Math.sign(a-b)) {
			case +1: return 'better';
			case 0: return 'same';
			case -1: return 'worse';
		}
	}	

.details-title
	| #{entry.ship.label}

.details-area
	//- Leave room for the build name:
	.details-caption

	.details-caption Launchers:
	.details-caption Reload:
	- for (let i = 0; i < Math.max(...entry.builds.map(build => build.torpedoes.length)); i++)	
		.details-caption Torpedo:
		.details-caption.indent Range:
		.details-caption.indent Damage:
		.details-caption.indent Speed:
		.details-caption.indent Visibility:
		.details-caption.indent Flooding:

	each build,i in entry.builds
		.build
			.details-value
				span.caption #{ buildNames[entry.builds.length][i] }

			.details-value
				| #{ Object.entries(launcherConfiguration(Object.values(build.tubes).flat())).map(([tubes, number]) => `${number}\u00d7${tubes}`).join(', ') }
				.launchers
					if (build.tubes.center.length > 0)
						.launcher-center
							span.launcherSide center
							br
							| #{ Object.entries(launcherConfiguration(build.tubes.center)).map(([tubes, number]) => `${number}\u00d7${tubes}`).join(', ') }
					if (build.tubes.port.length > 0 || build.tubes.starboard.length > 0)
						div
							span.launcherSide port
							br
							| #{ Object.entries(launcherConfiguration(build.tubes.port)).map(([tubes, number]) => `${number}\u00d7${tubes}`).join(', ') }
						div
							span.launcherSide stbd
							br
							| #{ Object.entries(launcherConfiguration(build.tubes.starboard)).map(([tubes, number]) => `${number}\u00d7${tubes}`).join(', ') }

			.details-value
				| #{ Math.round(build.reload) }
				span.unit s

			each torpedo, j in build.torpedoes
				- const predecessor = i > 0 ? entry.builds[i-1].torpedoes[j] : {};
				.torpedo
					.details-value
						| #{torpedo.torpedo.label}
					.details-value(class=compare(torpedo.range, predecessor.range))
						| #{ (torpedo.range/1000).toFixed(2) }
						span.unit km
					.details-value(class=compare(torpedo.damage, predecessor.damage))
						| #{ Math.round(torpedo.damage) }
						span.unit HP	
					.details-value(class=compare(torpedo.speed, predecessor.speed))
						| #{ Math.round(torpedo.speed) }
						span.unit kts
					//- Arguments to compare switched around because less is better for visibility:
					.details-value(class=compare(predecessor.visibility, torpedo.visibility)) 
						| #{ torpedo.visibility }
						span.unit km
					.details-value(class=compare(torpedo.flooding, predecessor.flooding))
						| #{ Math.round(torpedo.flooding * 100) }
						span.unit %

if (entry.ship.consumables.torpedoReloader)
	-const reloadBooster = entry.ship.consumables.torpedoReloader;
	hr
	.details-line #{reloadBooster.label}
	.details-line
		.details-caption Torpedo reload time:
		.details-value
			| #{reloadBooster.torpedoReloadTime}
			span.unit s
	.details-line
		.details-caption Cooldown:
		.details-value
			| #{reloadBooster.reloadTime}
			span.unit s
	.details-line
		.details-caption Number of consumables:
		.details-value #{reloadBooster.numConsumables}
	.details-line.contenders
		| In the same slot:
		- const sameSlot = entry.ship.consumables.getContending('torpedoReloader').asArray().filter(consumable => consumable.consumableType !== 'torpedoReloader');
		ul
			each contender in sameSlot
				li(style=`list-style-image: url(img/consumables/consumable_${contender.name}.png);`)
					| #{contender.label}
			else
				span.no-contenders none
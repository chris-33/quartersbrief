include warnings
include params

- 	
	function launcherConfiguration(launcherTubes) {
		const result = {}
		for (tubes of launcherTubes) {
			result[tubes] ??= 0;
			result[tubes]++;
		}
		return result;
	}
	function clampPercentage(min, val, max) {
		return Math.min(1, Math.max(0, (val - min) / (max - min)));
	}
	function speedPercentage(speed) {
		return clampPercentage(MIN_SPEED, speed, MAX_SPEED);
	}
	function damagePercentage(damage) {
		return clampPercentage(MIN_DAMAGE, damage, MAX_DAMAGE);
	}
.content
	each entry in entries
		.ship(class = {
					"ally": teams.allies.includes(entry.ship.id),
					"enemy": teams.enemies.includes(entry.ship.id),
					"player": teams.player === entry.ship.id
		})
			div 
				.label(data-details = entry.ship.name) #{entry.ship.label}
				+warningsPanel(entry)
			.diagram
				//- The length of the bar indicates the range of the torpedoes
				.shipbar(style=`flex: 0 0 calc(${Math.min(MAX_RANGE, entry.range) * 100 / MAX_RANGE}% - ${MAX_EXPLOSION_SIZE / 2}em)`, data-details = entry.ship.name)
					//- These are in reverse order because flex-direction is set to row-reverse on .shipbar
					//- (This is to make sure range is always right-aligned, even if speed and tubes are hidden)				
					
					//- The numeric range indicator
					.range(style=`margin-right: calc(0.5em * ${MIN_EXPLOSION_SIZE + VAR_EXPLOSION_SIZE * damagePercentage(entry.damage)}`)
						| #{(entry.range / 1000).toFixed(1)}
						span.unit km
			
					//- The speed effect: the faster the torpedoes, the larger (and brighter) the effect
					.speed(
						class={ hidden: entry.range <= RANGE_THRESHOLD_HIDE_SPEED }
						style=`
							width: ${speedPercentage(entry.speed) * VAR_SPEED_SIZE + MIN_SPEED_SIZE}em; 
							background-image: radial-gradient(
								farthest-side, 
								hsl(210, ${MIN_SPEED_SATURATION * (1 - speedPercentage(entry.speed))}%, ${MIN_SPEED_BRIGHTNESS + VAR_SPEED_BRIGHTNESS * speedPercentage(entry.speed)}%) ${SPEED_OFFSET * speedPercentage(entry.speed)}%, 
								transparent);`)
						span #{ Math.round(entry.speed) }
						span.unit kts

					//- The tube configuration			
					.tubes(class={ hidden: entry.range <= RANGE_THRESHOLD_HIDE_TUBES })
						| #{ Object.entries(launcherConfiguration(entry.tubes)).map(([tubes, number]) => `${number}\u00d7${tubes}`).join(', ') }
				
				//- The explosion circle indicates the damage the torpedoes do
				.explosion(
					style=`
						width: calc(1em * ${MIN_EXPLOSION_SIZE + VAR_EXPLOSION_SIZE * damagePercentage(entry.damage)}); 
						height: calc(1em * ${MIN_EXPLOSION_SIZE + VAR_EXPLOSION_SIZE * damagePercentage(entry.damage)});`, 
					data-details = entry.ship.name)
					
					div
						| #{entry.damage > 9999 ? `${(entry.damage / 1000).toFixed(1)}k` : Math.round(entry.damage)}
				
			//- Various warning indicators
			//- +warningsPanel(entry)

			aside.details(data-details-for=entry.ship.name, class = {
				"ally": teams.allies.includes(entry.ship.id),
				"enemy": teams.enemies.includes(entry.ship.id),
				"player": teams.player === entry.ship.id
			})
				include details


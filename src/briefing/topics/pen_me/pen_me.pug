-
	function makePath(poly) {
		let result = '';
		for (let vertex of poly) {
			const x = vertex[0]; const y = vertex[1];
			if (!result)
				result = `M ${x},${y}`;
			else
				result += ` L ${x},${y}`;
		}
		if (result) result += ' Z';
		return result;
	}
	function boundingBox(model) {
		model = Object.values(model).flat(2);
		const minX = Math.min(...model.map(vertex => vertex[0]));
		const minY = Math.min(...model.map(vertex => vertex[1]));
		const maxX = Math.max(...model.map(vertex => vertex[0]));
		const maxY = Math.max(...model.map(vertex => vertex[1]));
		return `${minX} ${minY} ${maxX - minX} ${maxY - minY}`;
	}
	function penned(thickness) {
		try{
		const cruiserPen = Object.values(pens).filter(pen => pen.ship.getClass() === 'Cruiser' || pen.ship.getClass() === 'Destroyer' || pen.ship.getClass() === 'Submarine');
		if (cruiserPen.every(pen => pen.ammos.he >= thickness || pen.ammos.sap >= thickness))
			return 'all';
		if (cruiserPen.some(pen => pen.ammos.he >= thickness || pen.ammos.sap >= thickness || pen.ammos.ifhe >= thickness))
			return 'some';
		else
			return 'none';
	} catch(err) { debugger}
	}

each view in [ 'side', 'top' ]
	.view
		h3 #{view[0].toUpperCase() + view.slice(1)} view:
		svg(version="1.1", xmlns="http://www.w3.org/2000/svg", viewBox=boundingBox(armor[view]))
			each piece, id in armor[view]
				- if (piece.length === 0) continue;
				- const thickness = ownship.get(`hull.armor.${id}`);
				path.piece(
					data-details=id,
					class=penned(thickness),
					d=piece.map(poly => makePath(poly)).join(' '))

include legend

include penlist

//- Convert piece IDs into a set and back into an array to remove duplicate.
//- Duplicates will cause an error when the topic is received, and we can't just use a set directly because pug doesn't know how to iterate over them
- const uniqueIDs = Array.from(new Set([ ...Object.keys(armor.side), ...Object.keys(armor.top) ]))
each id in uniqueIDs
	- const thickness = ownship.get(`hull.armor.${id}`);
	include details	
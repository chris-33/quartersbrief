extends ../armortopic

block content
	include details

	- 
		const caliber = ownship.artillery?.caliber;
		// Creates an overmatch classifier function for the passed ship
		function classifier(ship) {
			return (piece, id) => caliber >= Math.ceil(14.3 * ship.get(`hull.armor.${id}`)) ? 'overmatched' : '';
		}

	if caliber
		- 
			const biggestbox = Object.values(armors)
				.filter(armor => !(armor instanceof Error))
				.map(armor => boundingBox(armor))
				.reduce((prev, curr) => ({
					left: Math.min(prev.left, curr.left),
					top: Math.min(prev.top, curr.top),
					width: Math.max(prev.width, curr.width),
					height: Math.max(prev.height, curr.height)
				}));

		div.ships
			each ship in ships
				.ship(class=ship.class.toLowerCase(), data-details=ship.name)
					- const armor = armors[ship.name];
					
					.label #{ship.label}

					if armor instanceof Error
						| This armor view could not be created: #{armor.message}
					else
						.armor
							//- Using actual bounding box left side here to left-align the ships
							+armorview(armor, {					
								boundingBox: { ...biggestbox, left: boundingBox(armor).left }, 
								classifier: classifier(ship)
							})
						
						table.stats
							tr 
								td Min:
								td #{ Math.min(...Object.keys(armor).map(id => ship.get(`hull.armor.${id}`)).filter(thickness => thickness > 0)) }
									span.unit mm
							tr
								td Max:
								td #{ Math.max(...Object.keys(armor).map(id => ship.get(`hull.armor.${id}`))) }
									span.unit mm

						+details(ship, armor)

		div.ownguns
			| Your main artillery has a caliber of&ensp;
			span #{caliber}
				span.unit mm
			| &ensp;which overmatches&ensp;
			span #{Math.floor(caliber / 14.3)}
				span.unit mm
			| &ensp;of armor

	else
		.message You do not have a main battery.

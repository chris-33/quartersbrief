@use '../colors';
@use '../fontsizes';
@use 'sass:map';
@use 'details';

// Make sure the two rosters are aligned
.topic-content {
	display: flex;
}

.roster {
	display: inline-flex;
	flex-direction: column;
	width: 49%;
}

.participant {
	display: grid;
	align-items: center;
	column-gap: 0.5em;
	height: 2rem;
	padding: 0.5ex 0;

	// Set up the grid areas and widths as mirror images
	&.ally {				
		grid-template-columns: 1fr 33%;
		grid-template-areas: 
			'primary stats'
			'secondary stats';

		border-left: 0.33ch solid;
		padding-left: 1.5ch;
	}
	&.enemy {
		grid-template-columns: 33% 1fr;
		grid-template-areas: 
			'stats primary'
			'stats secondary';

		border-right: 0.33ch solid;
		padding-right: 1.5ch;

		// Make flex flow in reverse for enemies, 
		// and rotate images
		.person,
		.ship {
			text-align: right;
			flex-direction: row-reverse;

			svg {
				transform: rotate(180deg);
			}
		}
	}
	
	&.player,
	&.player svg.rank,
	&.player svg.class {
		color: colors.$player;
		font-weight: 600;
	}

	// Prevent line breaks in all grid items
	& > * {
		white-space: nowrap;
	}

	// Assign items to their grid areas
	.primary { grid-area: primary; }
	.secondary { grid-area: secondary; }
	.stats { grid-area: stats; }

	.secondary {
		font-size: fontsizes.$small;
		font-style: italic;
	}
	.stats {
		text-align: center;
	}
}

.ship,
.person {
	display: flex;
	align-items: center;
	gap: 0.5em;

	span {
		flex: 1fr;
		overflow: hidden;
		text-overflow: ellipsis;
	}

	svg {
		flex-grow: 0;
		flex-shrink: 0;
	}
}

.person	.rank {
	// Resize to set icon size and height disregarding aspect ratio.
	// (Disregarding aspect ratio because the preserveAspectRatio attribute is set to "none" is set on the svg.)
	flex-basis: 2em;
	height: 1.5ex;

	color: darkgray;

	// Rotate the rank 90 degrees around its center
	// For some reason, this has to be done on the <use>d image -
	// if we do it on the svg itself, it only rotates in increments of 180 degrees
	use {
		transform: rotate(90deg);
		transform-origin: center;
	}
}

.ship .class {
	flex-basis: 1.1em;
	aspect-ratio: 1;		
}

.winrate {
	font-weight: 600;
	font-size: fontsizes.$large;
}


.notification {
	color: colors.$aside;
	font-style: italic;
	font-size: fontsizes.$small;
}

// Insert spacing between the classes
@each $class in [ 'aircarrier', 'battleship', 'cruiser', 'destroyer', 'submarine' ] {
	.#{$class} + :not(.#{$class}) { margin-top: 2ex; }
}

// Assign appropriate color to each class
@each $class, $color in colors.$by-class {
	.participant.#{$class} {
		border-color: $color;
		.class { color: $color; }
	}
}

// Assign colors according to winrate
// Colors are the same as on wows-numbers.com
.superunicum { color: #a00dc5; }
.unicum { color: #d042f3; }
.great { color: #02c9b3; }
.verygood { color: #318000; }
.good { color: #44b300; }
.average { color: #ffc71f; }
.belowaverage { color: #fe7903; }
.bad { color: #fe0e00; }
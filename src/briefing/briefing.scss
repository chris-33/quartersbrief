@use 'topics/colors';
@use 'topics/fontsizes';
@use 'sass:math';

#briefing {
	background-color: white;
	opacity: 96%;

	outline: 2pt solid white;
	outline-offset: 2pt;

	// Assign animation briefing-appear/briefing-vanish to briefing container
	animation: 1s forwards paused briefing-appear, 1s forwards paused briefing-vanish;

	// Assign animation briefing-content-appear to all direct children
	& > * {
		animation: 1s forwards paused briefing-content-appear;
	}
}

// The animation to use when the briefing container is delivered
@keyframes briefing-appear {
	from { transform: scale(0, 0.1); }
	50% { transform: scale(1, 0.1); }
	to { transform: scale(1, 1); }	
}
// The animation to use when the briefing is removed
@keyframes briefing-vanish {
	to { transform: translateX(-100vw); }
}
// The animation to use to animate in the briefing content after the container has been shown
@keyframes briefing-content-appear {
	from { opacity: 0; }
	to { opacity: 1; }
}
// The animation to use when a new topic is delivered
@keyframes topic-content-appear {
	from {
		opacity: 0;
		transform: translateY(3rem) scale(0.7);
		animation-timing-function: linear;
	}
	20% {
		transform: translateY(3rem) scale(1);
		animation-timing-function: ease-out;
	}
	to {
		opacity: 1;
	}
}
// The animation to use for animating out the spinner displayed while the topic loading
@keyframes topic-content-vanish {
	from { opacity: 1; }
	to { opacity: 0; }
}

h1 {
	grid-column: 1 / -1;
	margin: 1rem 0 3rem;

	& > :first-child {
		font-size: fontsizes.$huge;
		font-variant: small-caps;
		font-weight: bold;
		text-align: center;
		text-decoration: underline;
		letter-spacing: 0.1ch;
	}

	& > :not(:first-child) {
		font-weight: bold;
		text-align: center;
		

		& > :not(:first-child)::before {
			content: ' / ';
			color: colors.$minor;
		}
	}
}

.unit {
	color: #757575;
	font-size: fontsizes.$small;
}

// Assign animation topic-content-appear when topic is NOT loading anymore
.topic-content {
	animation: 1s forwards paused topic-content-appear;
}
// Assign animation topic-content-vanish when topic is still loading
.topic-content.loading {
	animation: 1s forwards paused topic-content-vanish;
}

.topic-content.loading {
	display: flex;
	justify-content: center;
	align-items: center;
	height: 33vh;

	.spinner {
		font-family: 'dripicons-v2';
		font-size: 50px;
		color: lightgray;
		width: fit-content;
		animation: 3s infinite normal spin;
	}
}

@keyframes spin {
	@for $stop from 0 through 5 {
		#{20%*$stop} { transform: rotate($stop * math.div(180deg,5))}
	}
}

.topic-overlay {
	position: absolute;
	inset: 0px;
	z-index: 1;
	// Prevent overlay from blocking hover events on the actual topics
	pointer-events: none;
}

aside.details {
	padding: 0.5em;
	color: black;
	background-color: white;
	border: 1px solid var(--details-border-color, black);	
	box-shadow: 0 0 5px var(--details-border-color, black);

	z-index: 9999;
	display: none;
	text-align: left;

	&.ally {
		--details-border-color: #{colors.$ally};
	}
	&.enemy {
		--details-border-color: #{colors.$enemy};
	}
	&.player {
		--details-border-color: #{colors.$player};
	}

	.details-title {
		font-weight: bold;
		margin-bottom: 2ex;
	}

	&.ally .details-title {
		color: colors.$ally;
	}
	&.enemy .details-title {
		color: colors.$enemy;
	}
	
	&.player .details-title {
		color: colors.$player;
	}

	.details-line {
		white-space: nowrap;
		column-gap: 2em;
		
		&:not(:last-of-type) {
			margin-bottom: 0.5ex;
		}

		// These two lines take care of justifying captions to the left and values to the right:
		display: flex;
		justify-content: space-between;

		span.caption {
			margin-right: 1ch;
		}

		span.value {
			text-align: right;
		}
	}	

	.details-space {
		content: '';
		margin: 1ex 0;
	}

	hr {
		border: none;
		border-top: 0.5px solid colors.$aside;
	}
}

aside.details[data-show] {
	display: block;
}
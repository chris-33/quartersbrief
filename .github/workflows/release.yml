# This workflow builds a .deb package and a .msi installer when a version is pushed.

name: release

on:
  push:
    tags: 
      - 'v*'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  getversion:
    runs-on: ubuntu-latest
    outputs: 
      version: ${{steps.version.outputs.non-prefixed}}
    steps:
      - name: Get version from tag name
        id: version
        uses: LykkeBusiness/get-semver-from-tag-action@v1.0.2
        with:
          tag: ${{ github.ref }}
  
  # Compile a changelog from all commit messages between the pushed tag and its predecessor
  # Commit messages including the changelog relevance marker [[!]] will be included in the changelog
  # The relevance marker itself will be stripped from the messages
  changelog:
    runs-on: ubuntu-latest
    needs: getversion
    outputs:
      changelog: ${{ steps.compile-changelog.outputs.changelog }}
    steps:
      - uses: actions/checkout@v3

        # Get the PREVIOUS tag of the one that was just pushed
        # The previous commit is the most recent one reachable from the pushed tag that isn't the pushed tag itself
      - name: Get previous tag
        id: previous-tag
        run: echo "name=$(git describe --abbrev=0 --tags --exclude="v${{ needs.getversion.outputs.version }}" "${{ github.ref }}")" >> $GITHUB_OUTPUT

        # Run git log to show all commits between the previous commit and the current one
        # Only output the commit subject line (--format=%s)
        # Only output commits containing [[!]] (--grep=[[!]])
        # ([[!]] is the marker for changelog-relevant commits)
        # Strip the changelog relevance marker from the commit lines (sed s/[[!]]//)
      - name: Compile changelog
        id: compile-changelog
        run: |
          {
            echo 'changelog<<___EOF___'
            echo "**Changelog**:"
            git log --format=%s --grep="[[!]]" "${{ steps.previous-tag.outputs.name }}"..v"${{ needs.getversion.outputs.version }}" | awk '/\[\[!\]\]/ { sub(/\[\[!\]\]/, ""); print "- " $0 }'
            echo ___EOF___
          } >> $GITHUB_OUTPUT

  build-deb:
    runs-on: ubuntu-latest
    needs: getversion
    env:
      PKGROOT: ${{ github.workspace }}/tmp/debpkg
    outputs: 
      file_name: ${{ steps.package.outputs.file_name }}
    steps:
      # Check out the repository into $GITHUB_WORKSPACE
      - uses: actions/checkout@v3

      # Create the package contents directory structure
      - name: Assemble package contents
        id: assemble
        run: |
          echo Release dir: $PKGROOT/usr/lib
        
          mkdir -p $PKGROOT/usr/lib/quartersbrief
          cp -r $GITHUB_WORKSPACE/src $PKGROOT/usr/lib/quartersbrief
          cp -r $GITHUB_WORKSPACE/res $PKGROOT/usr/lib/quartersbrief
          cp $GITHUB_WORKSPACE/package.json $PKGROOT/usr/lib/quartersbrief
          cp $GITHUB_WORKSPACE/README.md $PKGROOT/usr/lib/quartersbrief
          
          mkdir -p $PKGROOT/usr/bin
          cp $GITHUB_WORKSPACE/.github/workflows/res/debian/quartersbrief $PKGROOT/usr/bin/
          chmod +x $PKGROOT/usr/bin/quartersbrief
          
          mkdir -p $PKGROOT/usr/share/quartersbrief
          cp -r $GITHUB_WORKSPACE/.github/workflows/res/common/agendas/* $PKGROOT/usr/share/quartersbrief
          
          mkdir -p -m 777 $PKGROOT/var/cache/quartersbrief
          mkdir -p -m 777 $PKGROOT/var/lib/quartersbrief

      # Create .deb control scripts
      - name: Create maintainer scripts
        run: |
          mkdir -p $PKGROOT/DEBIAN
          cp $GITHUB_WORKSPACE/.github/workflows/res/debian/preinst $PKGROOT/DEBIAN/ && chmod +x $PKGROOT/DEBIAN/preinst
          cp $GITHUB_WORKSPACE/.github/workflows/res/debian/postinst $PKGROOT/DEBIAN/ && chmod +x $PKGROOT/DEBIAN/postinst
          cp $GITHUB_WORKSPACE/.github/workflows/res/debian/prerm $PKGROOT/DEBIAN/ && chmod +x $PKGROOT/DEBIAN/prerm
 
      - name: Build .deb package
        uses: jiro4989/build-deb-action@v2
        id: package
        with:
          package: quartersbrief
          package_root: ${{ env.PKGROOT }}
          version: ${{ needs.getversion.outputs.version }}
          maintainer: 'BadIdeaException'
          arch: 'amd64'
          depends: 'nodejs (>= 17.0.0), wine, wine32'

      - uses: actions/upload-artifact@v3
        with: 
          name: deb
          path: ${{ steps.package.outputs.file_name }}
          retention-days: 1

  build-msi:
    needs: getversion
    runs-on: windows-latest
    env:
      workdir: ${{ github.workspace }}\tmp\
      releasedir: ${{ github.workspace }}\tmp\installer\app\
      assetdir: ${{ github.workspace }}\tmp\installer\assets\
    outputs: 
      file_name: ${{ steps.light.outputs.file_name }}
    steps:
      # Check out the repository into $GITHUB_WORKSPACE
      - uses: actions/checkout@v3

      # Windows Installer can't handle version tags with suffixed pre-release identifiers. To make matters 
      # worse, although it handles four-digit version numbers (a.b.c.d), it will only consider the first three
      # when deciding whether an installer is an upgrade over an existing installed product.
      # 
      # So instead, we need to construct a version number that will encode all the relevant
      # information into its last digit.
      # The actual version numbers are always in a format a.b.c or a.b.c-d.e, where
      # - a,b,c are numbers
      # - d is one of "alpha", "beta", "rc"
      # - e is a number
      # We will turn this into a.b.x, where x is formed as follows:
      # - x is 1500 * c
      # - if d and e are set, add e to x
      # - id d is
      #     "alpha", add to x 0
      #     "beta", add to x 500
      #     "rc", add to x 1000
      #     not set, add to x 1100
      # (The last bit ensures that release versions are always considered higher than prerelease ones.)
      # As a corollary, there can be 500 alpha and beta prereleases each, and 100 release candidates.
      - name: Set version for Windows Installer
        id: msi-version
        shell: pwsh
        run: |
          $Version = "${{ needs.getversion.outputs.version }}"
          if ($Version -match "(\d+)\.(\d+)\.(\d+)(?:-(\w+)\.(\d+))?") {
            $Major = $Matches[1]
            $Minor = $Matches[2]
            $Patch = $Matches[3]
            $PrereleaseIdentifier = $Matches[4]
            $PrereleaseNumber = $Matches[5] 
            $Range = switch ($PrereleaseIdentifier) {
              "alpha" { 0 }
              "beta" { 500 }
              "rc" { 1000 }
              default { 1100 }
            }
            $Composite = 1500 * $Patch + $Range + $PrereleaseNumber
            echo  "::set-output name=msi-version::$Major.$Minor.$Composite"
          } else {
            echo "$Version is not a valid version string"
            exit(1) 
          }

      # Assemble the files to be put into the installer
      - name: Assemble package contents
        run: |
          mkdir ${{ env.workdir }}
          mkdir ${{ env.releasedir }}
          mkdir ${{ env.assetdir }}
          xcopy /s /e ${{ github.workspace }}\src ${{ env.releasedir }}src\
          xcopy /s /e ${{ github.workspace }}\res ${{ env.releasedir }}res\
          xcopy ${{ github.workspace }}\package.json ${{ env.releasedir }}
          xcopy ${{ github.workspace }}\README.md ${{ env.releasedir }}
          xcopy ${{ github.workspace }}\.github\workflows\res\windows\Quartersbrief.cmd ${{ env.releasedir }}
          xcopy ${{ github.workspace }}\.github\workflows\res\windows\LICENSE.rtf ${{ env.workdir }}
          xcopy /s /e ${{ github.workspace }}\.github\workflows\res\common\agendas ${{ env.assetdir }}

      # Harvest the release dir, creating QuartersbriefFiles.wxs that includes all files to install
      - name: Harvest package contents
        id: heat
        # Command line switches
        # -ag: auto-generate GUIDs
        # -cg: component group name
        # -var: substitute variable for source, i.e. what to set source attribute of files to
        # -dr: directory reference to root directory, i.e. where to "insert" the harvested elements in the install structure
        # -srd: suppress harvesting the root directory (add the contents directly instead of nesting them in the root directory)
        # -out: output file
        run: |
          & "${env:WIX}bin\heat.exe" `
            dir `
            "${{ env.releasedir }}" `
            -ag `
            -cg QuartersbriefFiles `
            -var var.SourceDir `
            -dr INSTALLDIR `
            -srd `
            -out "${{ env.workdir }}QuartersbriefFiles.wxs"
          
          & "${env:WIX}bin\heat.exe" `
            dir `
            "${{ env.assetdir }}" `
            -ag `
            -cg QuartersbriefAgendaFiles `
            -var var.AssetDir `
            -dr AGENDADIR `
            -srd `
            -out "${{ env.workdir }}QuartersbriefAgendasFiles.wxs"

      # Compile all .wxs files to .wixobj files
      - name: Compile *.wxs to *.wixobj
        id: candle
        run: |
          & "${env:WIX}bin\candle.exe" `
            -out "${{ env.workdir }}" `
            -v `
            -ext WixUtilExtension `
            -arch x64 `
            -dSourceDir="${{ env.releasedir }}" `
            -dAssetDir="${{ env.assetdir }}" `
            -dVersion="${{ steps.msi-version.outputs.msi-version }}" `
            -dFullVersion="${{ needs.getversion.outputs.version }}" `
            "${{ github.workspace }}\.github\workflows\res\windows\*.wxs" "${{ env.workdir }}*.wxs"

      # Link all .wixobj files. This will create quartersbrief.msi
      - name: Link *.wixobj to quartersbrief.msi
        id: light
        run: |
          & "${env:WIX}bin\light.exe" `
            -ext WixUIExtension `
            -ext WixUtilExtension `
            -dWixUILicenseRtf="${{ github.workspace }}\.github\workflows\res\windows\LICENSE.rtf" `
            -b "${{ github.workspace }}\.github\workflows\res\windows" `
            -loc "${{ github.workspace }}\.github\workflows\res\windows\quartersbrief.wxl" `
            -cultures:en-US `
            "${{ env.workdir }}*.wixobj" `
            -out "${{ env.workdir }}Quartersbrief_v${{ needs.getversion.outputs.version }}.msi" 
          echo "::set-output name=file_name::Quartersbrief_v${{ needs.getversion.outputs.version }}.msi"

      # Upload the .msi file
      - uses: actions/upload-artifact@v3
        with:
          name: msi
          path: ${{ env.workdir }}${{ steps.light.outputs.file_name }}

  release:  
    runs-on: ubuntu-latest
    needs: [build-deb, build-msi, changelog]
    steps:
      - uses: actions/download-artifact@v3

      - uses: softprops/action-gh-release@v1
        with:
          body: ${{ needs.changelog.outputs.changelog }}
          prerelease: ${{ contains(needs.getversion.outputs.version, 'alpha' || contains(needs.getversion.outputs.version, 'beta') || contains(needs.getversion.outputs.version, 'rc') }}
          files: |
            msi/${{ needs.build-msi.outputs.file_name }}
            deb/${{ needs.build-deb.outputs.file_name }}